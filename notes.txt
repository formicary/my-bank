This file notes.txt will act as a sort of blog of my thought processes as I make changes to the program.
This will help justify and explain why I make the changes I do and also give you, the reader, an insight into my development process.
It is also a useful reference material for me while developing to keep track of what I have done and what I have to do.


I'm going to start with the styling. That way I can begin making improvements as I get used to the code.

-Added JavaDoc style commenting for the class (github says to treat the code like my own so "@author" is Matthew Howard)
----As I will likely edit the methods later, I'll JavaDoc them later
-Added more comments inside methods as it was rather inconsistent
-Fixed inconsistent spacing, indentation and comment style
-This is more personal preference but I added braces on single line 'for' loops to make it more explicit, especially given that single line functions have been written with braces
-During this time I've been adding "to do" notes for myself marking out things I've identified as odd or needing attention later
-Transaction did not need to import Calendar so I removed that

I will now begin to look at the wider code including the test files
I am unfamiliar with junit however a quick google search clears up any questions I have.
-Added a fetcher for the date of a transaction
It seems inefficient to me that every time an account's balance is checked that it loops through the entire transaction history.
I propose simply having a class variable to represent the balance of the account which is updated when there is a new transaction.
-Implemented this and switched Account.interestEarned() to use this.balance rather than tallying transactions at the start ( there are probably more instances of tallying transactions that I am missing )

I also notice a lack of features handling overdraft / overdrawn account
-I created a test for this and as I theorised going overdrawn causes bad effects
-The culprit for this is a bad Customer.toDollar function which uses the absolute value
-See my Unit test in CustomerTest for more results

-Changed Customer.getStatement() to initialise statement with a value rather than initialise and then declare value

-The test in TransactionTest is silly and doesn't test anything

It seems daft to me the current way Object Orientation is handling the relationship between the Bank, the Customer and the Accounts.
At the moment you create an account which you then pass through to the Customer in a function that returns the Customer to the caller.
I believe it makes more sense for the Account creation to be handled entirely within the Customer class.
The downside to this is that you cannot have shared accounts however this behaviour is not accounted for anywhere else in the code (nor the spec given to me), and I imagine is not important for the abc-bank program.

After implementing this the neatness is evident when comparing the CustomerTest.java code

Similarly I think that the Bank should "create" the customer. This prevents the customer from having an Account when they don't have a bank.
On second thought it makes more sense for the bank to be given a customer rather than the customer being materialised from the bank.
It occurs to me that at the moment a Customer can have an account without being a member of being of a bank.
I have added the requirement in the constructor of a Customer that a bank must be passed as an argument, and then I call addCustomer() on that bank. This means that all customers are registered with a bank, making this more accurate.

I changed the code to disallow entry into an overdraft.

Withdrawals and deposits of less than 0.01 work as intended in the code, but causes the statement printed to have an odd behaviour. The transactions are listed as $0.00 despite changes happening.
I will prevent withdrawals and deposits of less than 0.01 as this will more accurately model the behaviour of a real bank.

In fact to take this further I will disallow transactions with more than 2 decimal places.

Renamed Bank.format() to Bank.pluraliseString() because format() was a very ambiguous name

Removed Bank,getFirstCustomer() because it was poorly programmed and unused, and you should only program getters and setters that you will use.

Added the ability to move funds between two accounts owned by the same customer

Created a function to check for whether or not the most recent transaction in an account happened 10 days ago or not
Used that function to implement the desired changes to the MAXI_SAVINGS account interest calculation

Removed redundant and incorrectly named function Account.checkIfTransactionExists() and merged functionality with Account.sumTransactions() which did the same thing

Fixed a couple of tests