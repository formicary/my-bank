I'm going to start with the styling. That way I can begin making improvements as I get used to the code.


-Added JavaDoc style commenting for the class (github says to treat the code like my own so "@author" is Matthew Howard)
----As I will likely edit the methods later, I'll JavaDoc them later
-Added more comments inside methods as it was rather inconsistent
-Fixed inconsistent spacing, indentation and comment style
-This is more personal preference but I added braces on single line 'for' loops to make it more explicit, especially given that single line functions have been written with braces
-During this time I've been adding "to do" notes for myself marking out things I've identified as odd or needing attention later
-Transaction did not need to import Calendar so I removed that

I will now begin to look at the wider code including the test files
I am unfamiliar with junit however a quick google search clears up any questions I have.
-Added a fetcher for the date of a transaction
It seems inefficient to me that every time an account's balance is checked that it loops through the entire transaction history.
I propose simply having a class variable to represent the balance of the account which is updated when there is a new transaction.
-Implemented this and switched Account.interestEarned() to use this.balance rather than tallying transactions at the start ( there are probably more instances of tallying transactions that I am missing )

I also notice a lack of features handling overdraft / overdrawn account
-I created a test for this and as I theorised going overdrawn causes bad effects
-The culprit for this is a bad Customer.toDollar function which uses the absolute value
-See my Unit test in CustomerTest for more results

-Changed Customer.getStatement() to initialise statement with a value rather than initialise and then declare value

-The test in TransactionTest is silly and doesn't test anything